A class is a code template for creating objects. Objects have member variables and have behaviour associated with them. In python a class is created by the keyword class . An object is created using the constructor of the class. This object will then be called the instance of the class.
like a blue print.
*************
a class consist of the following:
        1. Instantiation-The process of creating an instance is known as instantiation
        2. Attributes-A class attribute is a Python variable that belongs to a class rather than a particular object.
        3. class Methods-  Class methods are methods that are called on the class itself, not on a specific object instance. Therefore, it belongs to a class level, and all class instances share a class method
        definition-a particular form of procedure for accomplishing or approaching something, especially a systematic or established one.

-instance atributes-
        An instance attribute is a Python variable belonging to one, and only one, object. usually represented by a "self" kinda like how we human say "I". 
what is self?
        Self is a parameter on which a method passes information about the individual object(instance) that has called the method.  
-Methods:
        A *function* stored in an instance or class is called a method
how to call a method?
        you need to call the method in your code.

@classmethod
        Class methods are defined with a decorator @classmethod. They belong to the class itself instead of the instance. Instead of implicitly passing self into the method, we pass cls. This is reference to the class.

This is how we write @classmethods:
class BankAccount:
    # class attributes
    bank_name = "First National Dojo"
    # new class attribute - a list of all the accounts!
    all_accounts = []
    
    def __init__(self, int_rate,balance):
        self.int_rate = int_rate
        self.balance = balance
        BankAccount.all_accounts.append(self)
    # class method to change the name of the bank
    @classmethod
    def change_bank_name(cls,name):
        cls.bank_name = name
    # class method to get balance of all accounts
    @classmethod
    def all_balances(cls):
        sum = 0
        # we use cls to refer to the class
        for account in cls.all_accounts:
            sum += account.balance
        return sum

@staticmethod:
        Static methods are functions defined within the class with a decorator @staticmethod.  They have no access on instance or class attributes, so if we need any existing values, they need to be passed in as arguments.